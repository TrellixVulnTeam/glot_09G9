#!/usr/bin/env python3

# This file is part of the Go-Smart Simulation Architecture (GSSA).
# Go-Smart is an EU-FP7 project, funded by the European Commission.
#
# Copyright (C) 2013-  NUMA Engineering Ltd. (see AUTHORS file)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import click
import asyncio
from aiohttp import web
import os
import tarfile
import logging
from git import Repo
import shutil
import txaio
import tabulate
import datetime

from glot.connector import execute

_default_server_port = 18103


_repo_locations = {
    'goosefoot': 'https://github.com/go-smart/glossia-container-goosefoot-control'
}


class OneFileHttpServer:
    def __init__(self, log, app, srv, handler, fut):
        self._app = app
        self._srv = srv
        self._handler = handler
        self._log = log
        self._fut = fut

    @classmethod
    @asyncio.coroutine
    def make(cls, log, filename):
        fut = asyncio.Future()

        def receive(request):
            log.info('Got request')
            yield from request.post()
            try:
                with open(filename, 'wb') as f:
                    g = request.POST['file'].file
                    f.write(g.read())
                fut.set_result(filename)
            except:
                log.exception('Could not receive file')
                fut.set_result(None)

            return web.Response(body=b"Accepted")

        app = web.Application()
        log.info('Adding POST route at /receive')
        app.router.add_route('POST', '/receive', receive)

        loop = asyncio.get_event_loop()
        handler = app.make_handler()

        # FIXME: this should be tied to the Docker interface,
        # when we have a good way of calculating it
        srv = yield from loop.create_server(handler, '0.0.0.0', _default_server_port)

        return cls(log, app, srv, handler, fut)

    def cancel(self):
        self._fut.cancel()

    @asyncio.coroutine
    def wait(self):
        yield from self._fut
        return self._fut.result()

    @asyncio.coroutine
    def close(self):
        self._srv.close()
        yield from self._srv.wait_closed()
        yield from self._app.shutdown()
        yield from self._handler.finish_connections(60.0)
        yield from self._app.cleanup()


def execute_command(f):
    def run(ctx, **kwargs):
        kwargs['ctx'] = ctx
        kwargs['debug'] = ctx.obj['DEBUG']
        execute(
            f,
            *ctx.obj['SERVER'],
            **kwargs
        )
    run.__name__ = f.__name__
    return run


@click.group()
@click.option('--server', default=None, help='ID of the specific Glossia server (defaults to primary on router)')
@click.option('--router', default='localhost', help='location of the WAMP server')
@click.option('--port', default=8080, help='port on server for WebSocket connection')
@click.option('--to', default=None, help='name of destination folder')
@click.option('--force', is_flag=True, help='Overwrite when necessary')
@click.option('--debug', default=False, is_flag=True)
@click.pass_context
def cli(ctx, server, router, port, to, force, debug):
    """Manage Glossia from the CLI"""
    ctx.obj['SERVER'] = (server, router, port)
    ctx.obj['DESTINATION'] = to
    ctx.obj['DEBUG'] = debug
    ctx.obj['FORCE'] = force
    if debug:
        txaio.start_logging(level='debug')
    else:
        txaio.start_logging(level='info')


@cli.command()
@click.option('--limit', default=10)
@click.option('--server-limit', default=1000)
@click.option('--sort', default='timestamp')
@click.argument('guid', default='')
@click.pass_context
@execute_command
@asyncio.coroutine
def search(mc, log, limit, server_limit, sort, guid, ctx):
    """Check for definitions match GUID (prefix)"""

    definitions = yield from mc('search', guid.upper(), server_limit)

    table = [[
        g,
        d['finalized'],
        datetime.datetime.fromtimestamp(d['status']['timestamp']).strftime('%A %d, %B %Y :: %H:%M:%S'),
        d['status']['message'].replace('\n', ' ')[0:60],
        d['exit_status'][0],
    ] for g, d in definitions.items()]

    if sort == 'timestamp':
        table.sort(key=lambda r: definitions[r[0]]['status']['timestamp'])
    elif sort == 'guid':
        table.sort(key=lambda r: r[0])

    if limit:
        table = table[:limit]

    print(tabulate.tabulate(table))


@cli.command()
@click.option('--target', default=None)
@click.option('-d', '--include-diagnostic', default=False, is_flag=True)
@click.option('-i', '--inspect-diagnostic', default=False, is_flag=True)
@click.argument('guid')
@click.pass_context
@execute_command
@asyncio.coroutine
def results(mc, log, guid, target, include_diagnostic, inspect_diagnostic, ctx):
    """Push results data to the webserver"""

    filename = None
    include_diagnostic = include_diagnostic or inspect_diagnostic

    if target is None:
        log.warn(
            "No target given, assuming we should provide "
            "a target for a local Glossia"
        )
        srv = yield from OneFileHttpServer.make(log, '%s-results.tgz' % guid)
    else:
        srv = None

    success = yield from mc('request_results', guid.upper(), target)

    if not success:
        log.error('Simulation not found')

    if srv is not None:
        if success:
            filename = yield from srv.wait()
        yield from srv.close()

    to = ctx.obj['DESTINATION'] if not target else None

    if include_diagnostic:
        yield from _diagnostic(mc, log, guid, target, inspect_diagnostic, ctx)

    if to:
        os.makedirs(to, exist_ok=True)
        with tarfile.open(filename) as f:
            f.extractall(path=to)


@cli.command()
@click.option('--target', default=None)
@click.option('--inspect', is_flag=True)
@click.argument('guid')
@click.pass_context
@execute_command
@asyncio.coroutine
def diagnostic(mc, log, guid, target, inspect, ctx):
    """Push diagnostic data to the webserver"""

    yield from _diagnostic(mc, log, guid, target, inspect, ctx)


def _diagnostic(mc, log, guid, target, inspect, ctx):
    filename = None

    if target is None:
        log.warn(
            "No target given, assuming we should provide "
            "a target for a local Glossia"
        )
        srv = yield from OneFileHttpServer.make(log, '%s-diagnostic.tgz' % guid)
    else:
        srv = None

    files = yield from mc('request_diagnostic', guid.upper(), target)

    if srv is not None:
        if files:
            filename = yield from srv.wait()
        else:
            srv.cancel()
        srv.close()

    if files:
        log.info("FILES:\n\t%s" % "\n\t".join(["[%s]: [%s]" % t for t in files.items()]))
    else:
        log.warn("No simulation diagnostics found")

    to = ctx.obj['DESTINATION'] if not target else None
    if inspect:
        log.debug("Inspect")
        if filename is None:
            if len(files) < 1:
                raise RuntimeError("No diagnostic files returned")
            elif len(files) > 1:
                raise RuntimeError("Multiple diagnostic files, run inspect manually")

            filename = files.popitem()
            log.debug("Using %s: %s" % filename)
            filename = filename[0]

        with tarfile.open(filename, 'r') as t:
            members = t.getmembers()
            names = [m.name for m in members if not m.isdir()]
            prefix = os.path.commonprefix(names)

        log.debug("Inspecting %s" % filename)
        _inspect(log, filename, os.path.join(to, prefix), ctx.obj['FORCE'])

    if to:
        os.makedirs(to, exist_ok=True)
        with tarfile.open(filename) as f:
            f.extractall(path=to)

    return filename


@cli.command()
@click.option('--mode', default='goosefoot')
@click.option('--verbose', is_flag=True)
@click.argument('archive')
@click.pass_context
def inspect(ctx, archive, mode='goosefoot', verbose=False):
    """Examine a diagnostic bundle"""
    log = logging.getLogger()
    to = ctx.obj['DESTINATION']
    _inspect(log, archive, to, ctx.obj['FORCE'], mode, verbose)


def _inspect(log, archive, to, force=False, mode='goosefoot', verbose=False):
    if not os.path.exists(archive):
        raise RuntimeError("You must supply a diagnostic archive")

    if to:
        os.makedirs(to, exist_ok=True)
        path = to
    else:
        path = os.path.splitext(archive)[0]

    if not force:
        if os.path.exists(path):
            raise FileExistsError("Run with --force to remove existing diagnostic directory")
    else:
        try:
            shutil.rmtree(path)
        except FileNotFoundError:
            pass

    rootpath = path
    log.info("Extracting to {path}".format(path=path))

    repo_location = _repo_locations[mode]
    log.info("Cloning control from {loc}".format(loc=repo_location))
    Repo.clone_from(repo_location, path)

    log.info("Opening diagnostic archive {arc}".format(arc=archive))
    with tarfile.open(archive, 'r') as t:
        members = t.getmembers()
        names = [m.name for m in members if not m.isdir()]
        prefix = os.path.commonprefix(names)
        log.info("Stripping prefix {prefix}".format(prefix=prefix))

        inp = os.path.join(prefix, 'input')
        inpfinal = os.path.join(prefix, 'input.final')
        try:
            t.getmember(inp)
        except KeyError:
            try:
                t.getmember(inpfinal)
            except KeyError:
                path = os.path.join(path, 'input')
                os.makedirs(path)

        for m in members:
            if m.name.startswith(prefix):
                outpath = os.path.join(path, m.name[len(prefix):])
                outpath = outpath.replace('input.final', 'input')

                if verbose:
                    log.info("{fm} --> {to}".format(fm=m.name, to=outpath))

                if m.isdir():
                    os.makedirs(outpath)
                else:
                    with open(outpath, 'wb') as f, t.extractfile(m) as g:
                        shutil.copyfileobj(g, f)

    log.info("Done extracting")

    if mode is 'goosefoot':
        shutil.copyfile(
            os.path.join(rootpath, 'input', 'settings.xml'),
            os.path.join(rootpath, 'settings', 'settings.xml')
        )


if __name__ == '__main__':
    cli(obj={})
