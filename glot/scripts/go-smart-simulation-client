#!/usr/bin/env python3

# This file is part of the Go-Smart Simulation Architecture (GSSA).
# Go-Smart is an EU-FP7 project, funded by the European Commission.
#
# Copyright (C) 2013-  NUMA Engineering Ltd. (see AUTHORS file)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from autobahn.asyncio.wamp import ApplicationRunner
import argparse

from glot.client import GoSmartSimulationClientComponent


# Start up a new client object with the context of an Autobahn WAMP application
def launch(x):
    cpt = GoSmartSimulationClientComponent(
        x,
        gssa_file=input_file,
        subdirectory=subdirectory,
        tmp_transferrer=tmp_transferrer,
        output_files=output_files,
        definition_files=definition_files,
        input_files=input_files,
        skip_clean=skip_clean,
        server=server
    )
    return cpt


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--gssa-file", help="GSSA-XML simulation description", default="original.xml")
    parser.add_argument("--subdir", help="subdirectory of /tmp containing input files", default=".")
    parser.add_argument("--host", help="host to connect to", default="localhost")
    parser.add_argument("--websocket-port", help="port hosting websocket", default="9000", type=int)
    parser.add_argument("--skip-clean", help="do not clean up after run", action='store_true', default=False)
    parser.add_argument("--output", help="file(s) to request as output", nargs='+', default="output.vtp")
    parser.add_argument("--definition", help="file(s) containing module / text of the definition node (which should exist but be empty in the GSSA file)", default=None, nargs='+')
    parser.add_argument("--input", help="input files for surfaces, etc.", default=None, nargs='+')
    parser.add_argument("--server", help="specific server to contact (UUID)", default=None)
    parser.add_argument("--tmp", help="location of the mounted transferrer directory", default='/tmp')
    args = parser.parse_args()
    input_file = args.gssa_file

    # Assign arguments to sensible variables
    host = args.host
    websocket_port = args.websocket_port
    subdirectory = args.subdir
    output_files = args.output
    definition_files = args.definition
    server = args.server
    input_files = args.input
    skip_clean = args.skip_clean
    tmp_transferrer = args.tmp

    # Instantiate an ApplicationRunner, that will make the WAMP connection and
    # call our launch function once all is well
    runner = ApplicationRunner(url="ws://%s:%d/ws" % (host, websocket_port), realm="realm1")
    runner.run(launch)
